/**
 * Teste de Terminal para AutoWabba
 *
 * Este script testa a l√≥gica de automa√ß√£o diretamente no terminal
 * para identificar problemas sem a interface gr√°fica
 */

const { chromium } = require("playwright");
const { checkBrowserAvailability, findTargetPage } = require("./src/browser");
const { performClick, hasManyErrorPages } = require("./src/downloader");
const { getWabbajackPath, isWabbajackRunning, launchWabbajackWithDebug } = require("./src/wabbajack");

// Configura√ß√£o de debug
const DEBUG = true;

function log(message) {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] ${message}`);
}

function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

async function testWabbajackPath() {
  log("=== TESTE 1: Verificando caminho do Wabbajack ===");

  try {
    const path = await getWabbajackPath();
    if (path) {
      log(`‚úÖ Wabbajack path encontrado: ${path}`);
      return path;
    } else {
      log("‚ùå Nenhum caminho do Wabbajack encontrado");
      log("üí° Execute o AutoWabba normal primeiro para selecionar o caminho");
      return null;
    }
  } catch (error) {
    log(`‚ùå Erro ao verificar caminho: ${error.message}`);
    return null;
  }
}

async function testWabbajackRunning() {
  log("=== TESTE 2: Verificando se Wabbajack est√° rodando ===");

  try {
    const running = await isWabbajackRunning();
    if (running) {
      log("‚úÖ Wabbajack est√° rodando");
    } else {
      log("‚ùå Wabbajack n√£o est√° rodando");
    }
    return running;
  } catch (error) {
    log(`‚ùå Erro ao verificar Wabbajack: ${error.message}`);
    return false;
  }
}

async function testBrowserConnection() {
  log("=== TESTE 3: Verificando conex√£o com browser ===");

  try {
    const pages = await checkBrowserAvailability();
    if (pages) {
      log(`‚úÖ Browser conectado! P√°ginas encontradas: ${pages.length}`);

      // Listar p√°ginas
      pages.forEach((page, index) => {
        log(`  ${index + 1}. ${page.type} - ${page.url}`);
      });

      return pages;
    } else {
      log("‚ùå Browser n√£o dispon√≠vel na porta 9222");
      return null;
    }
  } catch (error) {
    log(`‚ùå Erro ao conectar browser: ${error.message}`);
    return null;
  }
}

async function testFindDownloadPage(pages) {
  log("=== TESTE 4: Procurando p√°gina de download ===");

  try {
    const targetPage = await findTargetPage(pages);
    if (targetPage) {
      log(`‚úÖ P√°gina de download encontrada: ${targetPage.url}`);
      return targetPage;
    } else {
      log("‚ùå Nenhuma p√°gina de download encontrada");
      log("üí° Certifique-se de que o Wabbajack est√° na tela de downloads do Nexus");
      return null;
    }
  } catch (error) {
    log(`‚ùå Erro ao procurar p√°gina: ${error.message}`);
    return null;
  }
}

async function testClickDownload(targetPage) {
  log("=== TESTE 5: Testando clique no download ===");

  try {
    const browser = await chromium.connectOverCDP("http://localhost:9222");
    log("‚úÖ Browser conectado via CDP");

    const result = await performClick(browser, targetPage);
    await browser.close();

    if (result) {
      log(`‚úÖ Download iniciado com sucesso! URL: ${result}`);
      return true;
    } else {
      log("‚ùå Falha ao clicar no bot√£o de download");
      return false;
    }
  } catch (error) {
    log(`‚ùå Erro ao testar clique: ${error.message}`);
    return false;
  }
}

async function testFullAutomation() {
  log("=== TESTE COMPLETO: Simulando automa√ß√£o ===");

  let isRunning = true;
  let attempts = 0;
  const MAX_ATTEMPTS = 5;

  while (isRunning && attempts < MAX_ATTEMPTS) {
    attempts++;
    log(`\n--- Tentativa ${attempts}/${MAX_ATTEMPTS} ---`);

    try {
      // Verificar browser
      const pages = await checkBrowserAvailability();
      if (!pages) {
        log("‚è≥ Browser n√£o dispon√≠vel, aguardando...");
        await sleep(2000);
        continue;
      }

      // Procurar p√°gina de download
      const targetPage = await findTargetPage(pages);
      if (!targetPage) {
        log("‚è≥ Nenhuma p√°gina de download encontrada, aguardando...");
        await sleep(2000);
        continue;
      }

      // Tentar clicar
      const success = await testClickDownload(targetPage);
      if (success) {
        log("‚úÖ Automa√ß√£o funcionando corretamente!");
        isRunning = false;
      } else {
        log("‚è≥ Falha no clique, tentando novamente...");
        await sleep(5000);
      }
    } catch (error) {
      log(`‚ùå Erro na automa√ß√£o: ${error.message}`);
      await sleep(5000);
    }
  }

  if (attempts >= MAX_ATTEMPTS) {
    log("‚ùå M√°ximo de tentativas atingido");
  }
}

async function main() {
  log("üöÄ Iniciando testes de terminal do AutoWabba");
  log("=" * 50);

  // Teste 1: Verificar caminho do Wabbajack
  const wjPath = await testWabbajackPath();
  if (!wjPath) {
    log("\n‚ùå Teste interrompido: caminho do Wabbajack n√£o encontrado");
    return;
  }

  // Teste 2: Verificar se est√° rodando
  const isRunning = await testWabbajackRunning();
  if (!isRunning) {
    log("\n‚ùå Teste interrompido: Wabbajack n√£o est√° rodando");
    log("üí° Inicie o Wabbajack primeiro ou use o AutoWabba normal");
    return;
  }

  // Teste 3: Verificar conex√£o com browser
  const pages = await testBrowserConnection();
  if (!pages) {
    log("\n‚ùå Teste interrompido: browser n√£o dispon√≠vel");
    log("üí° Certifique-se de que o Wabbajack foi iniciado com debug");
    return;
  }

  // Teste 4: Procurar p√°gina de download
  const targetPage = await testFindDownloadPage(pages);
  if (!targetPage) {
    log("\n‚ùå Teste interrompido: p√°gina de download n√£o encontrada");
    log("üí° Navegue at√© uma p√°gina de download no Wabbajack");
    return;
  }

  // Teste 5: Testar clique
  await testClickDownload(targetPage);

  // Teste completo
  log("\n" + "=" * 50);
  await testFullAutomation();

  log("\nüèÅ Testes conclu√≠dos!");
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch((error) => {
    log(`üí• Erro fatal: ${error.message}`);
    process.exit(1);
  });
}

module.exports = {
  testWabbajackPath,
  testWabbajackRunning,
  testBrowserConnection,
  testFindDownloadPage,
  testClickDownload,
  testFullAutomation,
};
